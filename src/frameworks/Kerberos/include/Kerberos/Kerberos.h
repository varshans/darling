/*
 This file is part of Darling.

 Copyright (C) 2019 Lubos Dolezel

 Darling is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Darling is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Darling.  If not, see <http://www.gnu.org/licenses/>.
*/


#ifndef _Kerberos_H_
#define _Kerberos_H_

void* FSp_krb_get_svc_in_tkt(void);
void* FSp_profile_init(void);
void* FSp_profile_init_path(void);
void* FSp_put_svc_key(void);
void* FSp_read_service_key(void);
void* K5ClientGetAuthenticatorForServiceDeprecated(void);
void* K5ClientGetTicketForServiceDeprecated(void);
void* KClientAddCredentialsDeprecated(void);
void* KClientAddRealmMapDeprecated(void);
void* KClientAddServerMapDeprecated(void);
void* KClientAddServiceKey(void);
void* KClientCacheInitialTicketDeprecated(void);
void* KClientDecrypt(void);
void* KClientDecryptCompat(void);
void* KClientDeleteCredentialsDeprecated(void);
void* KClientDeleteRealmMapDeprecated(void);
void* KClientDeleteServerMapDeprecated(void);
void* KClientDeleteSessionDeprecated(void);
void* KClientDisposePrincipal(void);
void* KClientDisposeSession(void);
void* KClientDisposeSessionCompat(void);
void* KClientEncrypt(void);
void* KClientEncryptCompat(void);
void* KClientGetAuthenticatorForService(void);
void* KClientGetCCacheReference(void);
void* KClientGetClientPrincipal(void);
void* KClientGetCredentialsDeprecated(void);
void* KClientGetEncryptedServiceReply(void);
void* KClientGetErrorTextDeprecated(void);
void* KClientGetExpirationTime(void);
void* KClientGetLocalAddress(void);
void* KClientGetLocalRealmDeprecated(void);
void* KClientGetNthCredentialDeprecated(void);
void* KClientGetNthRealmMapDeprecated(void);
void* KClientGetNthServerDeprecated(void);
void* KClientGetNthServerMapDeprecated(void);
void* KClientGetNthServerPortDeprecated(void);
void* KClientGetNthSessionDeprecated(void);
void* KClientGetNumCredentialsDeprecated(void);
void* KClientGetNumSessionsDeprecated(void);
void* KClientGetProtectedServiceReply(void);
void* KClientGetRealmDeprecated(void);
void* KClientGetRemoteAddress(void);
void* KClientGetServerPrincipal(void);
void* KClientGetServiceKey(void);
void* KClientGetSessionKey(void);
void* KClientGetSessionKeyCompat(void);
void* KClientGetSessionUserNameCompat(void);
void* KClientGetTicketForService(void);
void* KClientGetTicketForServiceCompat(void);
void* KClientGetTicketForServiceWithChecksumCompat(void);
void* KClientGetUserNameDeprecated(void);
void* KClientGetVersion(void);
void* KClientKeyFileLogin(void);
void* KClientLogin(void);
void* KClientLoginCompat(void);
void* KClientLogout(void);
void* KClientLogoutCompat(void);
void* KClientMakeSendAuthCompat(void);
void* KClientNewClientSession(void);
void* KClientNewServerSession(void);
void* KClientNewSessionCompat(void);
void* KClientPasswordLogin(void);
void* KClientPasswordLoginCompat(void);
void* KClientPrincipalToV4String(void);
void* KClientPrincipalToV4Triplet(void);
void* KClientProtectIntegrity(void);
void* KClientProtectIntegrityCompat(void);
void* KClientSetClientPrincipal(void);
void* KClientSetKeyFile(void);
void* KClientSetLocalAddress(void);
void* KClientSetLocalRealmDeprecated(void);
void* KClientSetNthServerPortDeprecated(void);
void* KClientSetRemoteAddress(void);
void* KClientSetServerPrincipal(void);
void* KClientStatusCompat(void);
void* KClientV4StringToPrincipal(void);
void* KClientVerifyAuthenticator(void);
void* KClientVerifyEncryptedServiceReply(void);
void* KClientVerifyIntegrity(void);
void* KClientVerifyIntegrityCompat(void);
void* KClientVerifyProtectedServiceReply(void);
void* KClientVerifyReplyTicketCompat(void);
void* KClientVerifyUnencryptedReplyTicketCompat(void);
void* KClientVersionCompat(void);
void* KLAcquireInitialTickets(void);
void* KLAcquireInitialTicketsWithPassword(void);
void* KLAcquireNewInitialTicketCredentialsWithPassword(void);
void* KLAcquireNewInitialTickets(void);
void* KLAcquireNewInitialTicketsWithKeytab(void);
void* KLAcquireNewInitialTicketsWithPassword(void);
void* KLAcquireNewTickets(void);
void* KLAcquireNewTicketsWithPassword(void);
void* KLAcquireTickets(void);
void* KLAcquireTicketsWithPassword(void);
void* KLCacheHasValidTickets(void);
void* KLCancelAllDialogs(void);
void* KLChangePassword(void);
void* KLChangePasswordWithPasswords(void);
void* KLComparePrincipal(void);
void* KLCountKerberosRealms(void);
void* KLCreateLoginOptions(void);
void* KLCreatePrincipalFromKerberos5Principal(void);
void* KLCreatePrincipalFromPrincipal(void);
void* KLCreatePrincipalFromString(void);
void* KLCreatePrincipalFromTriplet(void);
void* KLDestroyTickets(void);
void* KLDisposeLoginOptions(void);
void* KLDisposePrincipal(void);
void* KLDisposeString(void);
void* KLFindKerberosRealmByName(void);
void* KLGetApplicationOptions(void);
void* KLGetDefaultLoginOption(void);
void* KLGetDisplayStringFromPrincipal(void);
void* KLGetErrorString(void);
void* KLGetIdleCallback(void);
void* KLGetKerberosDefaultRealm(void);
void* KLGetKerberosDefaultRealmByName(void);
void* KLGetKerberosRealm(void);
void* KLGetStringFromPrincipal(void);
void* KLGetTripletFromPrincipal(void);
void* KLHandleError(void);
void* KLInsertKerberosRealm(void);
void* KLLastChangedTime(void);
void* KLLoginOptionsSetAddressless(void);
void* KLLoginOptionsSetForwardable(void);
void* KLLoginOptionsSetProxiable(void);
void* KLLoginOptionsSetRenewableLifetime(void);
void* KLLoginOptionsSetServiceName(void);
void* KLLoginOptionsSetTicketLifetime(void);
void* KLLoginOptionsSetTicketStartTime(void);
void* KLRemoveAllKerberosRealms(void);
void* KLRemoveKerberosRealm(void);
void* KLRenewInitialTickets(void);
void* KLSetApplicationOptions(void);
void* KLSetDefaultLoginOption(void);
void* KLSetIdleCallback(void);
void* KLSetKerberosDefaultRealm(void);
void* KLSetKerberosDefaultRealmByName(void);
void* KLSetKerberosRealm(void);
void* KLSetSystemDefaultCache(void);
void* KLStoreNewInitialTicketCredentials(void);
void* KLTicketExpirationTime(void);
void* KLTicketStartTime(void);
void* KLValidateInitialTickets(void);
void* KLVerifyInitialTicketCredentials(void);
void* KLVerifyInitialTickets(void);
void* KPCreatePreferencesFile(void);
void* KPFreeListOfPreferencesFiles(void);
void* KPGetListOfPreferencesFiles(void);
void* KPInitializeWithDefaultKerberosLibraryPreferences(void);
void* KPPreferencesFileIsReadable(void);
void* KPPreferencesFileIsWritable(void);
void* KServerAddKeyCompat(void);
void* KServerGetKeyCompat(void);
void* KServerGetReplyTicketCompat(void);
void* KServerGetSessionTimeRemainingCompat(void);
void* KServerNewSessionCompat(void);
void* KServerVerifyTicketCompat(void);
void* __KLAllowAutomaticPrompting(void);
void* __KLAllowHomeDirectoryAccess(void);
void* __KLAllowRememberPassword(void);
void* __KLCreatePrincipalFromKerberos5Principal(void);
void* __KLCreatePrincipalFromTriplet(void);
void* __KLGetKerberos5PrincipalFromPrincipal(void);
void* __KLGetKeychainPasswordForPrincipal(void);
void* __KLGetTripletFromPrincipal(void);
void* __KLPrincipalIsTicketGrantingService(void);
void* __KLPrincipalSetKeychainPassword(void);
void* __KLPromptMechanism(void);
void* __KLRemoveKeychainPasswordForPrincipal(void);
void* __KLSetApplicationPrompter(void);
void* __KLSetAutomaticPrompting(void);
void* __KLSetHomeDirectoryAccess(void);
void* __KLSetPromptMechanism(void);
void* __KerberosDebugLogLevel(void);
void* __KerberosDebugPrint(void);
void* __KerberosDebugPrintMemory(void);
void* __KerberosDebugPrintSession(void);
void* __KerberosDebugVAPrint(void);
void* __KerberosInternal_krb5int_sendtokdc_debug_handler(void);
void* add_error_table(void);
void* apple_gss_krb5_export_authdata_if_relevant_context(void);
void* apple_gss_krb5_free_authdata_if_relevant(void);
void* cc_close(void);
void* cc_create(void);
void* cc_destroy(void);
void* cc_free_NC_info(void);
void* cc_free_creds(void);
void* cc_free_name(void);
void* cc_free_principal(void);
void* cc_get_NC_info(void);
void* cc_get_change_time(void);
void* cc_get_cred_version(void);
void* cc_get_name(void);
void* cc_get_principal(void);
void* cc_initialize(void);
void* cc_open(void);
void* cc_remove_cred(void);
void* cc_seq_fetch_NCs_begin(void);
void* cc_seq_fetch_NCs_end(void);
void* cc_seq_fetch_NCs_next(void);
void* cc_seq_fetch_creds_begin(void);
void* cc_seq_fetch_creds_end(void);
void* cc_seq_fetch_creds_next(void);
void* cc_set_principal(void);
void* cc_shutdown(void);
void* cc_store(void);
void* com_err(void);
void* com_err_va(void);
void* decomp_ticket(void);
void* dest_all_tkts(void);
void* dest_tkt(void);
void* encode_krb5_as_req(void);
void* error_message(void);
void* get_ad_tkt(void);
void* get_pw_tkt(void);
void* gss_accept_sec_context(void);
void* gss_acquire_cred(void);
void* gss_add_cred(void);
void* gss_add_oid_set_member(void);
void* gss_canonicalize_name(void);
void* gss_compare_name(void);
void* gss_context_time(void);
void* gss_create_empty_oid_set(void);
void* gss_delete_sec_context(void);
void* gss_display_name(void);
void* gss_display_status(void);
void* gss_duplicate_name(void);
void* gss_export_name(void);
void* gss_export_sec_context(void);
void* gss_get_mic(void);
void* gss_import_name(void);
void* gss_import_sec_context(void);
void* gss_indicate_mechs(void);
void* gss_init_sec_context(void);
void* gss_inquire_context(void);
void* gss_inquire_cred(void);
void* gss_inquire_cred_by_mech(void);
void* gss_inquire_mechs_for_name(void);
void* gss_inquire_names_for_mech(void);
void* gss_krb5_ccache_name(void);
void* gss_krb5_copy_ccache(void);
void* gss_krb5_export_lucid_sec_context(void);
void* gss_krb5_free_lucid_sec_context(void);
void* gss_krb5_get_tkt_flags(void);
void* gss_krb5_set_allowable_enctypes(void);
void* gss_krb5_ui(void);
void* gss_oid_to_str(void);
void* gss_process_context_token(void);
void* gss_release_buffer(void);
void* gss_release_cred(void);
void* gss_release_name(void);
void* gss_release_oid(void);
void* gss_release_oid_set(void);
void* gss_seal(void);
void* gss_sign(void);
void* gss_str_to_oid(void);
void* gss_test_oid_set_member(void);
void* gss_unseal(void);
void* gss_unwrap(void);
void* gss_verify(void);
void* gss_verify_mic(void);
void* gss_wrap(void);
void* gss_wrap_size_limit(void);
void* initialize_prof_error_table(void);
void* k_isinst(void);
void* k_isname(void);
void* k_isrealm(void);
void* kim_ccache_compare(void);
void* kim_ccache_copy(void);
void* kim_ccache_create_from_client_identity(void);
void* kim_ccache_create_from_default(void);
void* kim_ccache_create_from_display_name(void);
void* kim_ccache_create_from_keytab(void);
void* kim_ccache_create_from_krb5_ccache(void);
void* kim_ccache_create_from_type_and_name(void);
void* kim_ccache_create_new(void);
void* kim_ccache_create_new_if_needed(void);
void* kim_ccache_create_new_if_needed_with_password(void);
void* kim_ccache_create_new_with_password(void);
void* kim_ccache_destroy(void);
void* kim_ccache_free(void);
void* kim_ccache_get_client_identity(void);
void* kim_ccache_get_display_name(void);
void* kim_ccache_get_expiration_time(void);
void* kim_ccache_get_krb5_ccache(void);
void* kim_ccache_get_name(void);
void* kim_ccache_get_options(void);
void* kim_ccache_get_renewal_expiration_time(void);
void* kim_ccache_get_start_time(void);
void* kim_ccache_get_state(void);
void* kim_ccache_get_type(void);
void* kim_ccache_get_valid_credential(void);
void* kim_ccache_iterator_create(void);
void* kim_ccache_iterator_free(void);
void* kim_ccache_iterator_next(void);
void* kim_ccache_renew(void);
void* kim_ccache_set_default(void);
void* kim_ccache_validate(void);
void* kim_ccache_verify(void);
void* kim_credential_copy(void);
void* kim_credential_create_from_keytab(void);
void* kim_credential_create_from_krb5_creds(void);
void* kim_credential_create_new(void);
void* kim_credential_create_new_with_password(void);
void* kim_credential_free(void);
void* kim_credential_get_client_identity(void);
void* kim_credential_get_expiration_time(void);
void* kim_credential_get_krb5_creds(void);
void* kim_credential_get_options(void);
void* kim_credential_get_renewal_expiration_time(void);
void* kim_credential_get_service_identity(void);
void* kim_credential_get_start_time(void);
void* kim_credential_get_state(void);
void* kim_credential_is_tgt(void);
void* kim_credential_iterator_create(void);
void* kim_credential_iterator_free(void);
void* kim_credential_iterator_next(void);
void* kim_credential_renew(void);
void* kim_credential_store(void);
void* kim_credential_validate(void);
void* kim_credential_verify(void);
void* kim_identity_change_password(void);
void* kim_identity_compare(void);
void* kim_identity_copy(void);
void* kim_identity_create_from_components(void);
void* kim_identity_create_from_krb5_principal(void);
void* kim_identity_create_from_string(void);
void* kim_identity_free(void);
void* kim_identity_get_component_at_index(void);
void* kim_identity_get_components_string(void);
void* kim_identity_get_display_string(void);
void* kim_identity_get_krb5_principal(void);
void* kim_identity_get_number_of_components(void);
void* kim_identity_get_realm(void);
void* kim_identity_get_string(void);
void* kim_library_set_allow_automatic_prompting(void);
void* kim_library_set_allow_home_directory_access(void);
void* kim_library_set_application_name(void);
void* kim_library_set_ui_environment(void);
void* kim_options_copy(void);
void* kim_options_create(void);
void* kim_options_create_from_stream(void);
void* kim_options_free(void);
void* kim_options_get_addressless(void);
void* kim_options_get_forwardable(void);
void* kim_options_get_lifetime(void);
void* kim_options_get_proxiable(void);
void* kim_options_get_renewable(void);
void* kim_options_get_renewal_lifetime(void);
void* kim_options_get_service_name(void);
void* kim_options_get_start_time(void);
void* kim_options_set_addressless(void);
void* kim_options_set_forwardable(void);
void* kim_options_set_lifetime(void);
void* kim_options_set_proxiable(void);
void* kim_options_set_renewable(void);
void* kim_options_set_renewal_lifetime(void);
void* kim_options_set_service_name(void);
void* kim_options_set_start_time(void);
void* kim_options_write_to_stream(void);
void* kim_preferences_add_favorite_identity(void);
void* kim_preferences_copy(void);
void* kim_preferences_create(void);
void* kim_preferences_free(void);
void* kim_preferences_get_client_identity(void);
void* kim_preferences_get_favorite_identity_at_index(void);
void* kim_preferences_get_maximum_lifetime(void);
void* kim_preferences_get_maximum_renewal_lifetime(void);
void* kim_preferences_get_minimum_lifetime(void);
void* kim_preferences_get_minimum_renewal_lifetime(void);
void* kim_preferences_get_number_of_favorite_identities(void);
void* kim_preferences_get_options(void);
void* kim_preferences_get_remember_client_identity(void);
void* kim_preferences_get_remember_options(void);
void* kim_preferences_remove_all_favorite_identities(void);
void* kim_preferences_remove_favorite_identity(void);
void* kim_preferences_set_client_identity(void);
void* kim_preferences_set_maximum_lifetime(void);
void* kim_preferences_set_maximum_renewal_lifetime(void);
void* kim_preferences_set_minimum_lifetime(void);
void* kim_preferences_set_minimum_renewal_lifetime(void);
void* kim_preferences_set_options(void);
void* kim_preferences_set_remember_client_identity(void);
void* kim_preferences_set_remember_options(void);
void* kim_preferences_synchronize(void);
void* kim_selection_hints_copy(void);
void* kim_selection_hints_create(void);
void* kim_selection_hints_create_from_stream(void);
void* kim_selection_hints_forget_identity(void);
void* kim_selection_hints_free(void);
void* kim_selection_hints_get_allow_user_interaction(void);
void* kim_selection_hints_get_explanation(void);
void* kim_selection_hints_get_hint(void);
void* kim_selection_hints_get_identity(void);
void* kim_selection_hints_get_options(void);
void* kim_selection_hints_get_remember_identity(void);
void* kim_selection_hints_remember_identity(void);
void* kim_selection_hints_set_allow_user_interaction(void);
void* kim_selection_hints_set_explanation(void);
void* kim_selection_hints_set_hint(void);
void* kim_selection_hints_set_options(void);
void* kim_selection_hints_set_remember_identity(void);
void* kim_string_compare(void);
void* kim_string_copy(void);
void* kim_string_create_for_last_error(void);
void* kim_string_free(void);
void* kname_parse(void);
void* kname_unparse(void);
void* krb524_convert_creds_kdc(void);
void* krb5_425_conv_principal(void);
void* krb5_524_conv_principal(void);
void* krb5_524_convert_creds(void);
void* krb5_address_compare(void);
void* krb5_address_order(void);
void* krb5_address_search(void);
void* krb5_aname_to_localname(void);
void* krb5_appdefault_boolean(void);
void* krb5_appdefault_string(void);
void* krb5_auth_con_free(void);
void* krb5_auth_con_genaddrs(void);
void* krb5_auth_con_get_checksum_func(void);
void* krb5_auth_con_getaddrs(void);
void* krb5_auth_con_getauthenticator(void);
void* krb5_auth_con_getflags(void);
void* krb5_auth_con_getkey(void);
void* krb5_auth_con_getlocalseqnumber(void);
void* krb5_auth_con_getlocalsubkey(void);
void* krb5_auth_con_getrcache(void);
void* krb5_auth_con_getrecvsubkey(void);
void* krb5_auth_con_getremoteseqnumber(void);
void* krb5_auth_con_getremotesubkey(void);
void* krb5_auth_con_getsendsubkey(void);
void* krb5_auth_con_init(void);
void* krb5_auth_con_initivector(void);
void* krb5_auth_con_set_checksum_func(void);
void* krb5_auth_con_setaddrs(void);
void* krb5_auth_con_setflags(void);
void* krb5_auth_con_setports(void);
void* krb5_auth_con_setrcache(void);
void* krb5_auth_con_setrecvsubkey(void);
void* krb5_auth_con_setsendsubkey(void);
void* krb5_auth_con_setuseruserkey(void);
void* krb5_build_principal(void);
void* krb5_build_principal_alloc_va(void);
void* krb5_build_principal_ext(void);
void* krb5_build_principal_va(void);
void* krb5_c_block_size(void);
void* krb5_c_checksum_length(void);
void* krb5_c_decrypt(void);
void* krb5_c_encrypt(void);
void* krb5_c_encrypt_length(void);
void* krb5_c_enctype_compare(void);
void* krb5_c_free_state(void);
void* krb5_c_init_state(void);
void* krb5_c_is_coll_proof_cksum(void);
void* krb5_c_is_keyed_cksum(void);
void* krb5_c_keyed_checksum_types(void);
void* krb5_c_make_checksum(void);
void* krb5_c_make_random_key(void);
void* krb5_c_random_add_entropy(void);
void* krb5_c_random_make_octets(void);
void* krb5_c_random_os_entropy(void);
void* krb5_c_random_seed(void);
void* krb5_c_string_to_key(void);
void* krb5_c_string_to_key_with_params(void);
void* krb5_c_valid_cksumtype(void);
void* krb5_c_valid_enctype(void);
void* krb5_c_verify_checksum(void);
void* krb5_calculate_checksum(void);
void* krb5_cc_cache_match(void);
void* krb5_cc_close(void);
void* krb5_cc_copy_creds(void);
void* krb5_cc_default(void);
void* krb5_cc_default_name(void);
void* krb5_cc_destroy(void);
void* krb5_cc_end_seq_get(void);
void* krb5_cc_gen_new(void);
void* krb5_cc_get_config(void);
void* krb5_cc_get_name(void);
void* krb5_cc_get_principal(void);
void* krb5_cc_get_type(void);
void* krb5_cc_initialize(void);
void* krb5_cc_last_change_time(void);
void* krb5_cc_lock(void);
void* krb5_cc_move(void);
void* krb5_cc_new_unique(void);
void* krb5_cc_next_cred(void);
void* krb5_cc_remove_cred(void);
void* krb5_cc_resolve(void);
void* krb5_cc_retrieve_cred(void);
void* krb5_cc_set_config(void);
void* krb5_cc_set_default_name(void);
void* krb5_cc_set_flags(void);
void* krb5_cc_start_seq_get(void);
void* krb5_cc_store_cred(void);
void* krb5_cc_unlock(void);
void* krb5_cccol_cursor_free(void);
void* krb5_cccol_cursor_new(void);
void* krb5_cccol_cursor_next(void);
void* krb5_cccol_last_change_time(void);
void* krb5_cccol_lock(void);
void* krb5_cccol_unlock(void);
void* krb5_change_password(void);
void* krb5_checksum_size(void);
void* krb5_cksumtype_to_string(void);
void* krb5_clear_error_message(void);
void* krb5_copy_addresses(void);
void* krb5_copy_authdata(void);
void* krb5_copy_authenticator(void);
void* krb5_copy_checksum(void);
void* krb5_copy_context(void);
void* krb5_copy_creds(void);
void* krb5_copy_data(void);
void* krb5_copy_keyblock(void);
void* krb5_copy_keyblock_contents(void);
void* krb5_copy_principal(void);
void* krb5_copy_ticket(void);
void* krb5_decode_ticket(void);
void* krb5_decrypt(void);
void* krb5_deltat_to_string(void);
void* krb5_eblock_enctype(void);
void* krb5_encrypt(void);
void* krb5_encrypt_size(void);
void* krb5_enctype_to_string(void);
void* krb5_finish_key(void);
void* krb5_finish_random_key(void);
void* krb5_free_addresses(void);
void* krb5_free_ap_rep_enc_part(void);
void* krb5_free_authdata(void);
void* krb5_free_authenticator(void);
void* krb5_free_checksum(void);
void* krb5_free_checksum_contents(void);
void* krb5_free_cksumtypes(void);
void* krb5_free_config_files(void);
void* krb5_free_context(void);
void* krb5_free_cred_contents(void);
void* krb5_free_creds(void);
void* krb5_free_data(void);
void* krb5_free_data_contents(void);
void* krb5_free_default_realm(void);
void* krb5_free_enc_tkt_part(void);
void* krb5_free_error(void);
void* krb5_free_error_message(void);
void* krb5_free_host_realm(void);
void* krb5_free_keyblock(void);
void* krb5_free_keyblock_contents(void);
void* krb5_free_keytab_entry_contents(void);
void* krb5_free_krbhst(void);
void* krb5_free_principal(void);
void* krb5_free_tgt_creds(void);
void* krb5_free_ticket(void);
void* krb5_free_unparsed_name(void);
void* krb5_fwd_tgt_creds(void);
void* krb5_get_credentials(void);
void* krb5_get_credentials_renew(void);
void* krb5_get_credentials_validate(void);
void* krb5_get_default_config_files(void);
void* krb5_get_default_realm(void);
void* krb5_get_error_message(void);
void* krb5_get_host_realm(void);
void* krb5_get_in_tkt(void);
void* krb5_get_in_tkt_with_keytab(void);
void* krb5_get_in_tkt_with_password(void);
void* krb5_get_in_tkt_with_skey(void);
void* krb5_get_init_creds_keytab(void);
void* krb5_get_init_creds_opt_alloc(void);
void* krb5_get_init_creds_opt_free(void);
void* krb5_get_init_creds_opt_init(void);
void* krb5_get_init_creds_opt_set_address_list(void);
void* krb5_get_init_creds_opt_set_canonicalize(void);
void* krb5_get_init_creds_opt_set_change_password_prompt(void);
void* krb5_get_init_creds_opt_set_etype_list(void);
void* krb5_get_init_creds_opt_set_forwardable(void);
void* krb5_get_init_creds_opt_set_pa(void);
void* krb5_get_init_creds_opt_set_preauth_list(void);
void* krb5_get_init_creds_opt_set_process_last_req(void);
void* krb5_get_init_creds_opt_set_proxiable(void);
void* krb5_get_init_creds_opt_set_renew_life(void);
void* krb5_get_init_creds_opt_set_tkt_life(void);
void* krb5_get_init_creds_password(void);
void* krb5_get_krbhst(void);
void* krb5_get_permitted_enctypes(void);
void* krb5_get_profile(void);
void* krb5_get_prompt_types(void);
void* krb5_get_realm_domain(void);
void* krb5_get_renewed_creds(void);
void* krb5_get_server_rcache(void);
void* krb5_get_time_offsets(void);
void* krb5_get_validated_creds(void);
void* krb5_gss_register_acceptor_identity(void);
void* krb5_gss_use_kdc_context(void);
void* krb5_init_context(void);
void* krb5_init_keyblock(void);
void* krb5_init_random_key(void);
void* krb5_init_secure_context(void);
void* krb5_ipc_client_clear_target(void);
void* krb5_ipc_client_set_target_uid(void);
void* krb5_is_config_principal(void);
void* krb5_is_referral_realm(void);
void* krb5_is_thread_safe(void);
void* krb5_kt_add_entry(void);
void* krb5_kt_close(void);
void* krb5_kt_default(void);
void* krb5_kt_default_name(void);
void* krb5_kt_end_seq_get(void);
void* krb5_kt_get_entry(void);
void* krb5_kt_get_name(void);
void* krb5_kt_get_type(void);
void* krb5_kt_next_entry(void);
void* krb5_kt_read_service_key(void);
void* krb5_kt_remove_entry(void);
void* krb5_kt_resolve(void);
void* krb5_kt_start_seq_get(void);
void* krb5_kuserok(void);
void* krb5_mk_1cred(void);
void* krb5_mk_error(void);
void* krb5_mk_ncred(void);
void* krb5_mk_priv(void);
void* krb5_mk_rep(void);
void* krb5_mk_req(void);
void* krb5_mk_req_extended(void);
void* krb5_mk_safe(void);
void* krb5_os_localaddr(void);
void* krb5_parse_name(void);
void* krb5_parse_name_flags(void);
void* krb5_pkinit_cert_hash_str(void);
void* krb5_pkinit_get_client_cert(void);
void* krb5_pkinit_get_client_cert_db(void);
void* krb5_pkinit_get_kdc_cert(void);
void* krb5_pkinit_get_kdc_cert_db(void);
void* krb5_pkinit_have_client_cert(void);
void* krb5_pkinit_release_cert(void);
void* krb5_pkinit_release_cert_db(void);
void* krb5_pkinit_set_client_cert(void);
void* krb5_principal2salt(void);
void* krb5_principal_compare(void);
void* krb5_process_key(void);
void* krb5_prompter_posix(void);
void* krb5_random_key(void);
void* krb5_rd_cred(void);
void* krb5_rd_error(void);
void* krb5_rd_priv(void);
void* krb5_rd_rep(void);
void* krb5_rd_req(void);
void* krb5_rd_safe(void);
void* krb5_read_password(void);
void* krb5_realm_compare(void);
void* krb5_recvauth(void);
void* krb5_recvauth_version(void);
void* krb5_salttype_to_string(void);
void* krb5_sendauth(void);
void* krb5_server_decrypt_ticket_keytab(void);
void* krb5_set_default_realm(void);
void* krb5_set_default_tgs_enctypes(void);
void* krb5_set_default_tgs_ktypes(void);
void* krb5_set_error_message(void);
void* krb5_set_password(void);
void* krb5_set_password_using_ccache(void);
void* krb5_set_principal_realm(void);
void* krb5_set_real_time(void);
void* krb5_sname_to_principal(void);
void* krb5_string_to_cksumtype(void);
void* krb5_string_to_deltat(void);
void* krb5_string_to_enctype(void);
void* krb5_string_to_key(void);
void* krb5_string_to_salttype(void);
void* krb5_string_to_timestamp(void);
void* krb5_timeofday(void);
void* krb5_timestamp_to_sfstring(void);
void* krb5_timestamp_to_string(void);
void* krb5_unparse_name(void);
void* krb5_unparse_name_ext(void);
void* krb5_unparse_name_flags(void);
void* krb5_unparse_name_flags_ext(void);
void* krb5_us_timeofday(void);
void* krb5_use_enctype(void);
void* krb5_verify_checksum(void);
void* krb5_verify_init_creds(void);
void* krb5_verify_init_creds_opt_init(void);
void* krb5_verify_init_creds_opt_set_ap_req_nofail(void);
void* krb5_vset_error_message(void);
void* krb5int_accessor(void);
void* krb5int_freeaddrinfo(void);
void* krb5int_gai_strerror(void);
void* krb5int_getaddrinfo(void);
void* krb5int_gmt_mktime(void);
void* krb5int_init_context_kdc(void);
void* krb5int_pkinit_auth_pack_decode(void);
void* krb5int_pkinit_create_cms_msg(void);
void* krb5int_pkinit_pa_pk_as_rep_encode(void);
void* krb5int_pkinit_pa_pk_as_req_decode(void);
void* krb5int_pkinit_parse_cms_msg(void);
void* krb5int_pkinit_reply_key_pack_encode(void);
void* krb__get_srvtabname(void);
void* krb_change_password(void);
void* krb_check_auth(void);
void* krb_delete_cred(void);
void* krb_get_admhst(void);
void* krb_get_cred(void);
void* krb_get_err_text(void);
void* krb_get_in_tkt(void);
void* krb_get_in_tkt_creds(void);
void* krb_get_krbhst(void);
void* krb_get_lrealm(void);
void* krb_get_nth_cred(void);
void* krb_get_num_cred(void);
void* krb_get_phost(void);
void* krb_get_profile(void);
void* krb_get_pw_in_tkt(void);
void* krb_get_pw_in_tkt_creds(void);
void* krb_get_svc_in_tkt(void);
void* krb_get_tf_fullname(void);
void* krb_get_tf_realm(void);
void* krb_get_ticket_for_service(void);
void* krb_life_to_time(void);
void* krb_mk_auth(void);
void* krb_mk_err(void);
void* krb_mk_priv(void);
void* krb_mk_req(void);
void* krb_mk_req_creds(void);
void* krb_mk_safe(void);
void* krb_rd_err(void);
void* krb_rd_priv(void);
void* krb_rd_req(void);
void* krb_rd_req_int(void);
void* krb_rd_safe(void);
void* krb_realmofhost(void);
void* krb_recvauth(void);
void* krb_sendauth(void);
void* krb_set_lifetime(void);
void* krb_set_tkt_string(void);
void* krb_time_to_life(void);
void* kuserok(void);
void* profile_abandon(void);
void* profile_add_relation(void);
void* profile_clear_relation(void);
void* profile_configuration_updated(void);
void* profile_flush(void);
void* profile_flush_to_buffer(void);
void* profile_flush_to_file(void);
void* profile_free_buffer(void);
void* profile_free_list(void);
void* profile_get_boolean(void);
void* profile_get_integer(void);
void* profile_get_relation_names(void);
void* profile_get_string(void);
void* profile_get_subsection_names(void);
void* profile_get_values(void);
void* profile_init(void);
void* profile_init_path(void);
void* profile_is_modified(void);
void* profile_is_writable(void);
void* profile_iterator(void);
void* profile_iterator_create(void);
void* profile_iterator_free(void);
void* profile_release(void);
void* profile_release_string(void);
void* profile_rename_section(void);
void* profile_update_relation(void);
void* put_svc_key(void);
void* read_service_key(void);
void* remove_error_table(void);
void* reset_com_err_hook(void);
void* set_com_err_hook(void);
void* tkt_string(void);

#endif
